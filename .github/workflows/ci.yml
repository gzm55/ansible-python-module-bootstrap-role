---
name: ci workflow
"on": push

env:
  ANSIBLE_ROLES_PATH: ".."
  ANSIBLE_SSH_PIPELINING: 1

jobs:
  test-job:
    name: test the role
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3

    - name: print versions
      run: |
        set -x
        uname -a
        python3 --version
        pip3 --version
        ansible --version
        docker version

    - name: prepare tests
      run: |
        set -x
        pip3 install -r requirements.txt
        docker pull hermsi/alpine-sshd
        docker pull centos:7

        # Start a alpine sshd container for testing
        # - listen on localhost:4848
        # - enable root login
        # - root login via pubkey
        # - add userA
        docker rm -f alpine-sshd || true
        ssh-keygen -N '' -f ~/.ssh/id_rsa
        cp ~/.ssh/id_rsa.pub authorized_keys
        docker run -p 4848:22 --name alpine-sshd --hostname alpine-sshd -d -e ROOT_KEYPAIR_LOGIN_ENABLED=true -v `pwd`/authorized_keys:/root/.ssh/authorized_keys -e SSH_USERS="userA:1000:1000" -v `pwd`/authorized_keys:/conf.d/authorized_keys/userA hermsi/alpine-sshd
        docker exec -i alpine-sshd sh -c 'apk update'
        docker exec -i alpine-sshd sh -c 'apk add fish bc curl'
        ssh-keygen -f ~/.ssh/known_hosts -R [localhost]:4848 || true
        ssh-keyscan -p 4848 localhost >> ~/.ssh/known_hosts
        ssh -p 4848 root@localhost true

        # Start a centos 7 sshd container for testing
        # listen on localhost:5848
        # enable root login
        # root login via pubkey
        # add userA
        docker rm -f centos-sshd || true
        docker run -p 5848:22 --name centos-sshd --hostname centos-sshd -d centos:7 sh -xc 'yum --assumeyes install openssh-server tcsh && echo "PermitRootLogin yes" >> /etc/ssh/sshd_config && ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N "" -t rsa && ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N "" -t dsa && mkdir -p /var/run/sshd && exec /usr/sbin/sshd -D'
        docker exec -i centos-sshd sh -c 'echo -e "userA123456\nuserA123456\n" | adduser userA; su -c "cd; umask 077; mkdir -p .ssh; touch .ssh/authorized_keys" userA'
        cat ~/.ssh/id_rsa.pub | docker exec -i centos-sshd sh -c 'cd; umask 077; mkdir -p .ssh; tee -a .ssh/authorized_keys /home/userA/.ssh/authorized_keys'
        ssh-keygen -f ~/.ssh/known_hosts -R [localhost]:5848 || true

    - name: syntax check
      run: ansible-playbook tests/test.yml -i tests/inventory --syntax-check

    - name: root on alpine
      run: |
        set -x
        ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=root -e ansible_shell_type=fish -e ansible_shell_executable=/usr/bin/fish
        ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=root -e ansible_shell_type=fish -e ansible_shell_executable=/usr/bin/fish
        ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=root -e ansible_python_interpreter=/usr/bin/python3 # apk 3.5+ only support python3

    - name: become root on alpine
      run: |
        set -x
        docker exec -i alpine-sshd sh -c 'apk del python3; rm -rf /var/tmp/exxo-python*; apk add sudo'
        docker exec -i alpine-sshd sh -c 'addgroup userA wheel'
        docker exec -i alpine-sshd sh -c 'echo "userA:123456" | chpasswd'
        docker exec -i alpine-sshd sh -c 'echo "%wheel ALL=(ALL) ALL" >/etc/sudoers.d/wheel'
        ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=userA --become -e ansible_become_pass=123456

        # TODO exxo now does not work with alpine
        #- name: non root on alpine
        #run: |
        #set -x
        #docker exec -i alpine-sshd sh -c 'apk del python3'
        #true && ! ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=userA
        #docker exec -i alpine-sshd sh -xc 'export GLIBC_VERSION=2.35-r1 && curl -Lo /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && curl -Lo glibc.apk "https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-${GLIBC_VERSION}.apk" && curl -Lo glibc-bin.apk "https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-bin-${GLIBC_VERSION}.apk" && apk add glibc-bin.apk glibc.apk && /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib && echo -n "hosts:">>/etc/nsswitch.conf && echo " files mdns4_minimal [NOTFOUND=return] dns mdns4" >> /etc/nsswitch.conf'
        #docker exec -i alpine-sshd sh -xc 'export GLIBC_VERSION=2.35-r1 && curl -Lo /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && curl -Lo glibc.apk "https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-${GLIBC_VERSION}.apk" && curl -Lo glibc-bin.apk "https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-bin-${GLIBC_VERSION}.apk" && apk add glibc-bin.apk glibc.apk && echo -n "hosts:">>/etc/nsswitch.conf && echo " files mdns4_minimal [NOTFOUND=return] dns mdns4" >> /etc/nsswitch.conf'
        #ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=userA
        #ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=userA

    # TODO
    #- name: non root on alpine using docker connection
    #run: |
    #set -x
    #docker exec -i alpine-sshd sh -c 'apk del python3; rm -rf /var/tmp/exxo-python*'
    #ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=userA -e ansible_connection=docker -e ansible_host=alpine-sshd
    #ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=userA -e ansible_connection=docker -e ansible_host=alpine-sshd

    - name:  root on alpine with python3
      run: |
        set -x
        docker exec -i alpine-sshd sh -c 'apk del python3; rm -rf /var/tmp/exxo-python*; apk add python3'
        ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=root
        ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=root

    - name: root on centos 7
      run: |
        set -x
        i=0
        while (( i < 30 )); do
          i=$(( i + 1 ))
          ! ssh-keyscan -p 5848 localhost >> ~/.ssh/known_hosts || break
          sleep 1
        done
        ssh -p 5848 root@localhost true
        ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=root -e ansible_port=5848

    - name: non root on centos 7
      run: |
        set -x
        ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=userA -e ansible_port=5848 -e ansible_shell_type=csh -e ansible_shell_executable=/usr/bin/tcsh
        ansible-playbook tests/test.yml -i tests/inventory -e ansible_user=userA -e ansible_port=5848 -e ansible_shell_type=csh -e ansible_shell_executable=/usr/bin/tcsh


  lint-job:
    name: lint codes
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: prepare lint
      run: |
        pip3 install -r requirements.txt
        pip3 install ansible-lint
        ansible-lint --version
    - name: lint
      run: ansible-lint --show-relpath

  deploy-job:
    name: deploy the role on tag
    runs-on: ubuntu-22.04
    needs: [test-job, lint-job]
    if: github.ref_type == 'tag'
    steps:
    - uses: actions/checkout@v3
    - name: publish the role to Galaxy
      uses: robertdebock/galaxy-action@1.2.1
      with:
        galaxy_api_key: ${{ secrets.GALAXY_API_KEY }}
        git_branch: ${{ github.ref_name }}
