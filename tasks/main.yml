---
## Bootstrap python for ansible python modules
#
#    if ansible_python_interpreter is not set:
#        try to find a valid python interpreter
#        if find failed:
#            try to install a python interpreter
#        set ansible_python_interpreter
#    test run the ping module at last

- block:

  - name: detect installed python
    register: detect_installed_python
    vars:
    - raw_script: |-
        {{ shell_export }} PY{{ shell_export_eq }}/usr/bin/python{{ shell_newline }}
        {{ shell_exit_if_python_is_valid }}
        {{ shell_export }} PY{{ shell_export_eq }}python2.7{{ shell_newline }}
        {{ shell_exit_if_python_is_valid }}
        {{ shell_export }} PY{{ shell_export_eq }}python27{{ shell_newline }}
        {{ shell_exit_if_python_is_valid }}
        {{ shell_export }} PY{{ shell_export_eq }}python2{{ shell_newline }}
        {{ shell_exit_if_python_is_valid }}
        {{ shell_export }} PY{{ shell_export_eq }}python2.6{{ shell_newline }}
        {{ shell_exit_if_python_is_valid }}
        {{ shell_export }} PY{{ shell_export_eq }}python26{{ shell_newline }}
        {{ shell_exit_if_python_is_valid }}
        {{ shell_export }} PY{{ shell_export_eq }}pyrun2.7{{ shell_newline }}
        {{ shell_exit_if_python_is_valid }}
        {{ shell_export }} PY{{ shell_export_eq }}pyrun{{ shell_newline }}
        {{ shell_exit_if_python_is_valid }}
        {{ shell_export }} PY{{ shell_export_eq }}pypy{{ shell_newline }}
        {{ shell_exit_if_python_is_valid }}
        {{ shell_export }} PY{{ shell_export_eq }}{{ ( '/opt/exxo-python-' + exxo_version + '-' + exxo_installer_version ) | quote }}/bin/python{{ shell_newline }}
        {{ shell_exit_if_python_is_valid }}
        {{ shell_export }} PY{{ shell_export_eq }}{{ ( '/var/tmp/exxo-python-' + exxo_version + '-' + exxo_installer_version ) | quote }}/bin/python{{ shell_newline }}
        {{ shell_exit_if_python_is_valid }}
        {{ shell_exit }} 41
    raw: "{{ shell_exec | quote }} -c {{ raw_script | quote }}"
    failed_when: detect_installed_python.rc | d(500) != 0 or detect_installed_python.stdout_lines | last | d('') == ''
    changed_when: False

  - name: set ansible_python_interpreter
    set_fact:
      ansible_python_interpreter: "{{ detect_installed_python.stdout_lines | last }}"
    when:
    - detect_installed_python | skipped == False
    - detect_installed_python | succeeded
    - detect_installed_python.stdout_lines | last != '/usr/bin/python'

  rescue:

  - block:
    - name: remote is root?
      register: remote_is_root
      raw: id -u
      ignore_errors: True
      changed_when: False

    - name: remote is Linux X64 with gblic
      register: remote_linux_x64_gblic
      script: "{{ role_path }}/files/detect-linux-x64-gcc"
      ignore_errors: True
      failed_when: remote_linux_x64_gblic.rc | d(0) != 42
      changed_when: False

    # python bootstrap for ansible
    # reference:
    #   [0]: https://github.com/dochang/ansible-role-bootstrap/
    #   [1]: https://github.com/bambocher/ansible-role-bootstrap/
    # Apt:
    #   - Install `python-apt` which is required by Ansible `apt` module.
    # zypper:
    #   - zypper must be checked before yum since zypper uses yum as backend.
    #   - Install `python-xml`, because the Ansible module `zypper_repository` depends on it.
    # yum:
    #   - Install `yum-utils`.  Ansible `yum` module requires `repoquery`,
    #     which is provided by `yum-utils`, to use `list` parameter.
    # dnf:
    #   - Install `python2-dnf`, which is required by Ansible `dnf` module.
    # emerge:
    #   - Install `gentoolkit`, which contains `equery`. `gentoolkit` is also required by Ansible `portage` module.
    - name: installing python
      register: installing_python
      vars:
      - exxo_deploy_dir: "{{ ( remote_is_root.stdout_lines | first | d('') == '0') | ternary('/opt', '/var/tmp') }}/exxo-python-{{ exxo_version }}-{{ exxo_installer_version }}"
      - raw_script: |-
          {{ ( remote_is_root.stdout_lines | first | d('') == '0') | ternary(shell_which + ' apt-get', 'false') }} \
              {{ shell_and }} {{ shell_export }} DEBIAN_FRONTEND{{ shell_export_eq }}noninteractive \
              {{ shell_and }} apt-get --quiet=2 --option 'Acquire::Languages=none' update \
              {{ shell_and }} apt-get --quiet=2 --assume-yes install python python-dev python-apt \
              {{ shell_and }} {{ shell_exit }} 0{{ shell_newline }}
          {{ ( remote_is_root.stdout_lines | first | d('') == '0') | ternary(shell_which + ' zypper', 'false') }} \
              {{ shell_and }} zypper --quiet refresh \
              {{ shell_and }} zypper --quiet --non-interactive install --auto-agree-with-licenses python python-devel python-xml \
              {{ shell_and }} {{ shell_exit }} 0{{ shell_newline }}
          {{ shell_which }} zypper{{ shell_newline }}
          test {{ shell_err_code }} != 0 {{ shell_and }} \
          {{ ( remote_is_root.stdout_lines | first | d('') == '0') | ternary(shell_which + ' yum', 'false') }} \
              {{ shell_and }} yum --quiet makecache fast \
              {{ shell_and }} yum --quiet --assumeyes install python python-devel yum-utils \
              {{ shell_and }} {{ shell_exit }} 0{{ shell_newline }}
          {{ ( remote_is_root.stdout_lines | first | d('') == '0') | ternary(shell_which + ' pacman', 'false') }} \
              {{ shell_and }} pacman --sync --quiet --noconfirm --refresh python2 \
              {{ shell_and }} {{ shell_exit }} 0{{ shell_newline }}
          {{ ( remote_is_root.stdout_lines | first | d('') == '0') | ternary(shell_which + ' dnf', 'false') }} \
              {{ shell_and }} dnf --quiet makecache fast \
              {{ shell_and }} dnf --quiet --assumeyes install python python-devel python2-dnf \
              {{ shell_and }} {{ shell_exit }} 0{{ shell_newline }}
          {{ ( remote_is_root.stdout_lines | first | d('') == '0') | ternary(shell_which + ' emerge', 'false') }} \
              {{ shell_and }} emerge --quiet --sync \
              {{ shell_and }} emerge --quiet --ask n '=dev-lang/python-2*' gentoolkit \
              {{ shell_and }} {{ shell_exit }} 0{{ shell_newline }}
          {{ ( remote_is_root.stdout_lines | first | d('') == '0') | ternary(shell_which + ' apk', 'false') }} \
              {{ shell_and }} apk add --quiet --update-cache python \
              {{ shell_and }} {{ shell_exit }} 0{{ shell_newline }}
          {{ ( remote_is_root.stdout_lines | first | d('') == '0') | ternary(shell_which + ' pkg', 'false') }} \
              {{ shell_and }} pkg install -y python27 \
              {{ shell_and }} {{ shell_exit }} 0{{ shell_newline }}
          {{ (remote_linux_x64_gblic.rc | d(0) == 42) | ternary('true', shell_exit + ' 50') }}{{ shell_newline }}
          {{ shell_which }} wget {{ shell_or }} {{ shell_which }} curl {{ shell_or }} {{ shell_exit }} 51{{ shell_newline }}
          cd {{ shell_or }} {{ shell_exit }} 52{{ shell_newline }}
          mkdir -p {{ ('.ansible/tmp/exxo' + omit) | quote }} {{ shell_or }} {{ shell_exit }} 53{{ shell_newline }}
          cd {{ ('.ansible/tmp/exxo' + omit) | quote }} {{ shell_or }} {{ shell_exit }} 54{{ shell_newline }}
          {{ shell_which }} wget {{ shell_and }} wget -O - -- {{ exxo_url | quote }} | tar {{ ( 'x' + exxo_untar_flags + 'vf' ) | quote }} -{{ shell_newline }}
          test {{ shell_err_code }} != 0 \
               {{ shell_and }} rm -f exxo \
               {{ shell_and }} {{ shell_which }} curl \
               {{ shell_and }} curl -L --insecure -o - -- {{ exxo_url | quote }}  | tar {{ ( 'x' + exxo_untar_flags + 'vf' ) | quote }} -{{ shell_newline }}
          test -x exxo \
               {{ shell_and }} mkdir -p -- {{ exxo_deploy_dir | quote }} \
               {{ shell_and }} ./exxo venv -p 2.7 -- {{ exxo_deploy_dir | quote }} \
               {{ shell_and }} {{ shell_exit }} 0{{ shell_newline }}
          {{ shell_exit }} 55
      raw: "{{ shell_exec | quote }} -c {{ raw_script | quote }}"

    - name: detect installed python again
      register: detect_installed_python_2
      vars:
      - raw_script: |-
          {{ shell_export }} PY{{ shell_export_eq }}/usr/bin/python{{ shell_newline }}
          {{ shell_exit_if_python_is_valid }}
          {{ shell_export }} PY{{ shell_export_eq }}python2.7{{ shell_newline }}
          {{ shell_exit_if_python_is_valid }}
          {{ shell_export }} PY{{ shell_export_eq }}python27{{ shell_newline }}
          {{ shell_exit_if_python_is_valid }}
          {{ shell_export }} PY{{ shell_export_eq }}python2{{ shell_newline }}
          {{ shell_exit_if_python_is_valid }}
          {{ shell_export }} PY{{ shell_export_eq }}python2.6{{ shell_newline }}
          {{ shell_exit_if_python_is_valid }}
          {{ shell_export }} PY{{ shell_export_eq }}python26{{ shell_newline }}
          {{ shell_exit_if_python_is_valid }}
          {{ shell_export }} PY{{ shell_export_eq }}pyrun2.7{{ shell_newline }}
          {{ shell_exit_if_python_is_valid }}
          {{ shell_export }} PY{{ shell_export_eq }}pyrun{{ shell_newline }}
          {{ shell_exit_if_python_is_valid }}
          {{ shell_export }} PY{{ shell_export_eq }}pypy{{ shell_newline }}
          {{ shell_exit_if_python_is_valid }}
          {{ shell_export }} PY{{ shell_export_eq }}{{ ( '/opt/exxo-python-' + exxo_version + '-' + exxo_installer_version ) | quote }}/bin/python{{ shell_newline }}
          {{ shell_exit_if_python_is_valid }}
          {{ shell_export }} PY{{ shell_export_eq }}{{ ( '/var/tmp/exxo-python-' + exxo_version + '-' + exxo_installer_version ) | quote }}/bin/python{{ shell_newline }}
          {{ shell_exit_if_python_is_valid }}
          echo "Unsupported platforms!"{{ shell_newline }}
          {{ shell_exit }} 43
      raw: "{{ shell_exec | quote }} -c {{ raw_script | quote }}"
      failed_when: detect_installed_python_2.rc | d(500) != 0 or detect_installed_python_2.stdout_lines | last | d('') == ''
      changed_when: False

    - name: set ansible_python_interpreter after installing
      set_fact:
        ansible_python_interpreter: "{{ detect_installed_python_2.stdout_lines | last }}"
      when:
      - detect_installed_python_2 | skipped == False
      - detect_installed_python_2 | succeeded
      - detect_installed_python_2.stdout_lines | last != '/usr/bin/python'

    always:
    - name: cleanup downloading files
      raw: rm -rf {{ ('~/.ansible/tmp/exxo' + omit) | quote }}
      ignore_errors: True
      changed_when: False

  always:
  - name: test ping
    ping:

  vars:
  - shell_exec: >-
        {{ ( [ansible_shell_type | d('sh')]
             | intersect(['sh', 'csh', 'fish'])
             | list
             | length == 1
             and ansible_version.full | version_compare('2.1', '>='))
           | ternary(ansible_shell_executable, '/bin/sh')
        }}
  - shell_type: >-
        {{ ( [ansible_shell_type | d('')]
             | intersect(['sh', 'csh', 'fish'])
             | list
             | length == 1 )
           | ternary(ansible_shell_type, 'sh')
        }}
  - shell_backslash: >-
                     {% raw -%}\{%- endraw %}
  - shell_err_code:  "{{ (shell_type == 'sh')   | ternary('$?',        '$status'   ) }}"
  - shell_and:       "{{ (shell_type == 'fish') | ternary('; and',     '&&'        ) }}"
  - shell_or:        "{{ (shell_type == 'fish') | ternary('; or',      '||'        ) }}"
  - shell_export:    "{{ (shell_type == 'csh')  | ternary('setenv',    'export'    ) }}"
  - shell_export_eq: "{{ (shell_type == 'csh')  | ternary(' ',         '='         ) }}"
  - shell_which:     "{{ (shell_type == 'csh')  | ternary('which',     'command -v') }}"
  - shell_exit:      "{{ (shell_type == 'csh')  | ternary('eval exit', 'exit'      ) }}"
  - shell_newline:   "{{ (shell_type == 'csh')  | ternary(';' + shell_backslash, '') }}"
  - shell_exit_if_python_is_valid: >
        eval \""$PY"\"" -c 'import sys; sys.exit(not (sys.hexversion >= 0x02060000 and sys.hexversion < 0x03000000))'"{{ shell_newline }}
        {{ shell_and }} {{ shell_which }} "$PY"{{ shell_newline }}
        {{ shell_and }} {{ shell_exit }} 0{{ shell_newline }}
  - exxo_installer_version: "0"
  when:
  - ansible_python_interpreter | d('') == '' or detect_installed_python is defined or installing_python is defined
